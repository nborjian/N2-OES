import os
import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import json


from jvframework.misc import hdd_share
from scipy.signal import find_peaks
from scipy.optimize import curve_fit


##############################################################################
# CONSTANTS
##############################################################################
k_B = 8.617e-5  # Boltzmann constant in eV/K


# The four lines (2nd positive system of N2) we want to use for the Boltzmann plot
# Format: (wavelength_nm, g, A, E_upper[eV])
lines_info = [
    (337.0,   4, 1.39e7, 11.03),
    (357.6,   6, 8.88e6, 11.08),
    (380.4,   8, 3.34e6, 11.14),
    (405.8,  10, 9.60e5, 11.20)
]


##############################################################################
# HELPER FUNCTIONS
##############################################################################
def parse_shot_number_from_filename(fname):
    base, _ = os.path.splitext(fname)
    for part in base.split("_"):
        if part.lower().startswith("shot"):
            try:
                return int(part.lower().replace("shot", ""))
            except ValueError:
                return None
    return None


def nearest_intensity(x_array, y_array, target_wl):
    """Find intensity at the closest wavelength to target_wl."""
    idx = np.abs(x_array - target_wl).argmin()
    return y_array[idx]


def estimate_boltzmann_temp_and_points(x_array, y_array):
    """
    For the four lines, get intensities, build Y=ln(I/(gA)) vs X=E,
    do a linear fit. Return (T_est, E_vals, Y_vals, slope, intercept).
    """
    E_vals = []
    Y_vals = []
    for (wl_nm, g_val, A_val, E_val) in lines_info:
        I_val = nearest_intensity(x_array, y_array, wl_nm)
        if I_val <= 0:
            return (np.nan, None, None, None, None)
        ln_term = math.log(I_val / (g_val * A_val))
        E_vals.append(E_val)
        Y_vals.append(ln_term)


    E_array = np.array(E_vals)
    Y_array = np.array(Y_vals)
    slope, intercept = np.polyfit(E_array, Y_array, 1)
    if slope == 0:
        return (np.nan, E_array, Y_array, slope, intercept)


    T_est = -1.0 / (k_B * slope)
    return (T_est, E_array, Y_array, slope, intercept)


##############################################################################
# 1) Load JSON => shot parameters
##############################################################################
json_directory = r"H:\Data\tb1\2025-03-04\1UPElectrodesRebuild"
json_directory = hdd_share(json_directory)


shot_params = {}  # shot_num -> { "BP10":..., "TF10":..., "QN11":..., "BF21":... }


for fname in sorted(os.listdir(json_directory)):
    if fname.lower().endswith(".json"):
        file_path = os.path.join(json_directory, fname)
        # Skip blank JSON file
        if os.stat(file_path).st_size == 0:
            print(f"Skipping blank JSON file: {fname}")
            continue
        shot_num = parse_shot_number_from_filename(fname)
        if shot_num is None:
            continue
        with open(file_path, 'r') as f:
            data = json.load(f)
        tag_data = data.get("tag", {})
        tf10 = tag_data.get("tf10_power", None)
        if tf10 is None or tf10 == 0:
            continue
        bp10 = tag_data.get("bp10_pressure", None)
        qn11 = tag_data.get("qn11_setpoint", None)
        bf21 = tag_data.get("bf21_mf", None)
        if None not in (bp10, tf10, qn11, bf21):
            shot_params[shot_num] = {
                "TF10": tf10,
                "BP10": bp10,
                "QN11": qn11,
                "BF21": bf21
            }


##############################################################################
# 2) Load wavelength calibration
##############################################################################
calib_path = hdd_share(r"H:\Software\OceanInsight\HR2\jvcalibration\wavelengths.csv")
df_calib = pd.read_csv(calib_path)
calib_cols = df_calib.columns.tolist()


##############################################################################
# 3) CSV folder => estimate temperature
##############################################################################
csv_folder = r"H:\Data\tb1\2025-03-04\1UPElectrodesRebuild"
csv_folder = hdd_share(csv_folder)


results_list = []
example_data_for_plot = None  # We'll store (E_array, Y_array, slope, intercept) for the last successful shot


for filename in sorted(os.listdir(csv_folder)):
    # Only process .csv with "HR200204"
    if filename.lower().endswith(".csv") and ("hr200204" in filename.lower()):
        file_path = os.path.join(csv_folder, filename)
        # Skip blank CSV file
        if os.stat(file_path).st_size == 0:
            print(f"Skipping blank CSV file: {filename}")
            continue
        shot_num = parse_shot_number_from_filename(filename)
        if shot_num is None:
            continue
        if shot_num not in shot_params:
            continue


        df_spec = pd.read_csv(file_path)
        df_spec.columns = ["timestamp"] + calib_cols
        x_vals = df_spec.columns[1:].astype(float)
        y_vals = df_spec.iloc[0, 1:].values


        # Exclude if maximum intensity in 300..400 nm range is less than 500
        mask_300_400 = (x_vals >= 300) & (x_vals <= 400)
        if mask_300_400.any():
            if y_vals[mask_300_400].max() < 500:
                continue
        else:
            continue


        T_k, E_arr, Y_arr, slope, intercept = estimate_boltzmann_temp_and_points(x_vals, y_vals)
        if not np.isnan(T_k):
            # Store results
            results_list.append({
                "ShotNum": shot_num,
                "TF10": shot_params[shot_num]["TF10"],
                "BP10": shot_params[shot_num]["BP10"],
                "QN11": shot_params[shot_num]["QN11"],
                "BF21": shot_params[shot_num]["BF21"],
                "Temperature(K)": T_k
            })
            # Keep for example plot
            example_data_for_plot = (shot_num, E_arr, Y_arr, slope, intercept, T_k)


df_temp = pd.DataFrame(results_list)
df_temp.sort_values(by="ShotNum", inplace=True)


##############################################################################
# 4) Print table
##############################################################################
print("\n===== N2 Boltzmann Temperature vs. Shot Number =====\n")
print(df_temp.to_string(index=False))


##############################################################################
# 5) PLOT: T vs TF10, BP10, QN11, BF21
##############################################################################
plt.figure(figsize=(6,4))
plt.scatter(df_temp["TF10"], df_temp["Temperature(K)"], color="b")
plt.title("3/04/25: N2 Plasma Boltzmann Temperature vs. TF10 Power")
plt.xlabel("TF10 Power (W)")
plt.ylabel("Temperature (K)")
plt.grid(True)
plt.tight_layout()
plt.show()


plt.figure(figsize=(6,4))
plt.scatter(df_temp["BP10"], df_temp["Temperature(K)"], color="r")
plt.title("3/04/25: N2 Plasma Boltzmann Temperature vs. BP10 Pressure")
plt.xlabel("BP10 Pressure (kPa)")
plt.ylabel("Temperature (K)")
plt.grid(True)
plt.tight_layout()
plt.show()


plt.figure(figsize=(6,4))
plt.scatter(df_temp["QN11"], df_temp["Temperature(K)"], color="g")
plt.title("3/04/25: N2 Plasma Boltzmann Temperature vs. QN11 Flow")
plt.xlabel("QN11 Flow (slpm)")
plt.ylabel("Temperature (K)")
plt.grid(True)
plt.tight_layout()
plt.show()


plt.figure(figsize=(6,4))
plt.scatter(df_temp["BF21"], df_temp["Temperature(K)"], color="purple")
plt.title("3/04/25: N2 Plasma Boltzmann Temperature vs. BF21 Flow")
plt.xlabel("BF21 Flow (slpm)")
plt.ylabel("Temperature (K)")
plt.grid(True)
plt.tight_layout()
plt.show()


##############################################################################
# 6) EXAMPLE BOLTZMANN PLOT for the last successful shot
##############################################################################
if example_data_for_plot is not None:
    shot_num, E_arr, Y_arr, slope, intercept, T_est = example_data_for_plot


    # Build a line from min(E) to max(E)
    E_min, E_max = E_arr.min(), E_arr.max()
    E_line = np.linspace(E_min, E_max, 100)
    Y_line = slope * E_line + intercept


    plt.figure(figsize=(6,4))
    plt.scatter(E_arr, Y_arr, color="blue", label="Data Points")
    plt.plot(E_line, Y_line, color="red", label="Linear Fit")
    plt.title(f"Boltzmann Plot for ShotNum={shot_num}\nT={T_est:.1f}K")
    plt.xlabel("Upper Energy Level (eV)")
    plt.ylabel("ln(I / (gÂ·A))")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()
else:
    print("\nNo successful shot found for the example Boltzmann plot.\n")


